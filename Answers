// (Chapter 2)

// Looping a triangle
const calls = 7;
let character = '#';
for (let i = 0; i < calls; i++) {
  console.log(character);
  character += character[0];
}

//FizzBuzz

for(i=1;i<=100;i++){
  if(i % 3 === 0 && i % 5 !== 0) console.log('Fizz');
  if(i % 5 === 0 && i % 3 !== 0) console.log('Buzz');
  if(i % 3 === 0 && i % 5 === 0) console.log('FizzBuzz');
  if(i % 3 !== 0 && i % 5 !== 0) console.log(i);
}

//Chess board

let size = 10;

for (i = 0; i < size; i++) {
	let board = '';
	for (x = 0; x < size; x++) {
		if (i % 2 === 0) {
			if (x % 2 === 0) board += '#';
			else board += ' ';
		}
		if (i % 2 !== 0) {
			if (x % 2 === 0) board += ' ';
			else board += '#';
		}
	}
	console.log(board);
}

// (Chapter 3)

// Minimum

function min(num1, num2){
  var arr = [];
  arr.push(num1), arr.push(num2);
  return arr.sort()[0];
}

// Recursion

function isEven(num){
  if(num <= 0)
    {
    if(num === -1) return false;
    if(num === 0) return true;
    return num = isEven(num + 2);
    }
  
  if(num >= 0)
    {
    if(num === 1) return false;
    if(num === 0) return true;
    return num = isEven(num - 2);
    }
}

//Bean Counter

function countBs (str){
  var count = 0;
  var arr = str.split('');
  console.log(arr);
  for(i=0;i<arr.length;i++){
    if (arr[i] === 'B' || arr[i] === 'b') count++;
  }
  return count;
}

function countChar (str, char){
  var count = 0;
  var arr = str.split('');
  console.log(arr);
  for(i=0;i<arr.length;i++){
    if (arr[i] === char) count++;
  }
  return count;
}

// (Chapter 4)

// The Sum of a Range

function range(num1, num2, steps){
  var resArr = [];

  if(steps === undefined){
  for(i=num1;i<= num2;i++){
    resArr.push(i);
  }}
   
  if(steps !== undefined){
    if(num1 > num2){
    for(i=num1;i>=num2;i+=steps){
    resArr.push(i);
  }}
   
    if(num1 < num2){
    for(i=num1;i<=num2;i+=steps){
    resArr.push(i);
  }}
   
}
  return resArr;
}

function sum (arr){
  var result = 0;
  
  for(i=0;i<arr.length;i++){
    result += arr[i];
  }
  return result;
}

//Reversing an Array

function reverseArray(j) {
	var newArr = [];
  	for(i = 0; i < j.length; i++) {
  		var value = j[i];
      	newArr.unshift(value);
  }
  return newArr;
};

function reverseArrayInPlace(arr) {
	var temp;
  	for(i = 0; i < arr.length / 2; i++) {
  		temp = arr[i];
      		arr[i] = arr[arr.length - 1 - i];
      		arr[arr.length - 1 - i] = temp;
  	}
}

// A list

function arrayToList(arr){

  var index = arr.length - 1;
  var node = null;
  
  while(index >= 0){
    node = prepend(arr[index], node);
    index = index - 1;
  }
  
  return node;
}

function listToArray(list){
  var arr = [];
  
  while(list !== null){
    arr.push(list.value);
    list = list.rest;
  }
  
  return arr;
}

function prepend(value, rest){
  return {
    value: value,
    rest: rest
  };
}

function nth(list, n){
  if(n < 0 || list === null){
    return;
  }
  
  while(list.rest !== null && n > 0){
    list = list.rest;
    n = n - 1;
  }
  
  if(n === 0){
    return list.value;
  }
}

// Deep Comparison

function deepEqual(a, b) {

  if (a === b) {
    return true;
  }
  
  if (typeof a !== "object" || typeof b !== "object" || a === null || b === null || Object.keys(a).length !== Object.keys(b).length) {
      return false;
  } else {
    for (var property in a) {
		return deepEqual(a[property], b[property]);
    }
  }
}

(Chapter 5)

// Flattening

let arrays = [[1, 2, 3], [4, 5], [6]];

function flatten(arr) {
    return arr.reduce(function (flat, toFlatten) {
      return flat.concat(Array.isArray(toFlatten) ? flatten(toFlatten) : toFlatten);
    }, []);
  }
  
 // Your Own Loop
 
 function loop(value, test, update, execute) {
  if (!test(value)) return; // stop
  execute(value);
  return loop(update(value), test, update, execute);
}
